--https://www.roblox.com/games/5512825420/UPDATE-3-Tapping-Heroes

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/preztel/AzureLibrary/master/uilib.lua", true))()

local AutoTab = Library:CreateTab("Tapping-Heroes GUI","things", true)
local eggs= Library:CreateTab("Auto Buy Eggs","things", true)
local eggs2= Library:CreateTab("Auto Buy Eggs2","things", true)
local Rebirths = Library:CreateTab("Auto Rebirths","things", true)
local Rebirths2= Library:CreateTab("Auto Rebirths 2","things", true)
local teleports= Library:CreateTab("Teleports","things", true)
local MISC = Library:CreateTab("MISC","things", true)
local credits = Library:CreateTab("Credits","things", true)


credits:CreateButton("Our Discords", function() --you dont need "arg" for a button
    setclipboard("AHAHAHAHAH")
end)

credits:CreateButton("https://discord.gg/KmHZUpXEmQ", function() --you dont need "arg" for a button
    setclipboard("https://discord.gg/KmHZUpXEmQ")
end)

credits:CreateButton("by Altix#3395", function() --you dont need "arg" for a button
    setclipboard("Altix#3395")
end)

credits:CreateButton("by I'm A Cat#7202", function() --you dont need "arg" for a button
    setclipboard("I'm A Cat#7202")
end)


AutoTab:CreateToggle("Auto Collect diamond", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Collec = true 
        while wait(0.5) and _G.Collec do
local children = game.Workspace:GetChildren()
    for _, child in pairs(children) do
        for _, child in pairs(child:GetChildren()) do
            table.insert(children, child)
         end
         if child:IsA("BasePart") and child.Name == "diamond" then
            child.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame            
        end
    end
    end
    else
        _G.Collec = false
    end
end)

AutoTab:CreateToggle("Auto Click", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.a = true 
        while wait(0) and _G.a do
local args = {
    [1] = "tap",
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.a = false
    end
end)

AutoTab:CreateToggle("Auto Buy Boosts", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.b = true 
        while wait(0) and _G.b do
local args = {
    [1] = "boost",
    [2] = "taps",
    [3] = 1,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
local args = {
    [1] = "boost",
    [2] = "taps",
    [3] = 2,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
local args = {
    [1] = "boost",
    [2] = "diamonds",
    [3] = 1,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
local args = {
    [1] = "boost",
    [2] = "diamonds",
    [3] = 2,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
local args = {
    [1] = "boost",
    [2] = "renewals",
    [3] = 1,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
-- Script generated by SimpleSpy - credits to exxtremewa#9394
-- This generator is IN DEVELOPMENT, not compatible with all types/classes yet

local args = {
    [1] = "boost",
    [2] = "renewals",
    [3] = 2,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.b = false
    end
end)

AutoTab:CreateToggle("Auto Buy Upgrades", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.c = true 
        while wait(0) and _G.c do
local args = {
    [1] = "buyupgrade",
    [2] = "speed",
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
local args = {
    [1] = "buyupgrade",
    [2] = "jump",
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
local args = {
    [1] = "buyupgrade",
    [2] = "storage",
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
local args = {
    [1] = "buyupgrade",
    [2] = "taps",
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))

local args = {
    [1] = "buyupgrade",
    [2] = "taps2",
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
local args = {
    [1] = "buyupgrade",
    [2] = "fastegg",
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.c = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.d = true 
        while wait(0) and _G.d do
            local args = {
    [1] = "renew",
    [2] = 1,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.d = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x3", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.e = true 
        while wait(0) and _G.e do
            local args = {
    [1] = "renew",
    [2] = 3,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.e = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x5", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.f = true 
        while wait(0) and _G.f do
            local args = {
    [1] = "renew",
    [2] = 5,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.f = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x10", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.g = true 
        while wait(0) and _G.g do
            local args = {
    [1] = "renew",
    [2] = 10,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.g = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x20", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.h = true 
        while wait(0) and _G.h do
            local args = {
    [1] = "renew",
    [2] = 20,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.h = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x50", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.i = true 
        while wait(0) and _G.i do
            local args = {
    [1] = "renew",
    [2] = 50,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.i = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.j = true 
        while wait(0) and _G.j do
            local args = {
    [1] = "renew",
    [2] = 100,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.j = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x250", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.k = true 
        while wait(0) and _G.k do
            local args = {
    [1] = "renew",
    [2] = 250,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.k = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x500", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.l = true 
        while wait(0) and _G.l do
            local args = {
    [1] = "renew",
    [2] = 500,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.l = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.m = true 
        while wait(0) and _G.m do
            local args = {
    [1] = "renew",
    [2] = 1000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.m = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x5K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.n = true 
        while wait(0) and _G.n do
            local args = {
    [1] = "renew",
    [2] = 5000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.n = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x10K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.o = true 
        while wait(0) and _G.o do
            local args = {
    [1] = "renew",
    [2] = 10000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.o = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x50K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.p = true 
        while wait(0) and _G.p do
            local args = {
    [1] = "renew",
    [2] = 50000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.p = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x100K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.q = true 
        while wait(0) and _G.q do
            local args = {
    [1] = "renew",
    [2] = 100000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.q = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x500K", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.r = true 
        while wait(0) and _G.r do
            local args = {
    [1] = "renew",
    [2] = 500000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.r = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.s = true 
        while wait(0) and _G.s do
            local args = {
    [1] = "renew",
    [2] = 1000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.s = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x10M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.t = true 
        while wait(0) and _G.t do
            local args = {
    [1] = "renew",
    [2] = 10000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.t = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x50M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.u = true 
        while wait(0) and _G.u do
            local args = {
    [1] = "renew",
    [2] = 50000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.u = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x500M", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.v = true 
        while wait(0) and _G.v do
            local args = {
    [1] = "renew",
    [2] = 500000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.v = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x1B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.w = true 
        while wait(0) and _G.w do
local args = {
    [1] = "renew",
    [2] = 1000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.w = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x2.5B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.x = true 
        while wait(0) and _G.x do
local args = {
    [1] = "renew",
    [2] = 2500000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.x = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x5B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.y = true 
        while wait(0) and _G.y do
local args = {
    [1] = "renew",
    [2] = 5000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.y = false
    end
end)

Rebirths:CreateToggle("Auto Rebirths x10B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.z = true 
        while wait(0) and _G.z do
local args = {
    [1] = "renew",
    [2] = 10000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.z = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x25B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.za = true 
        while wait(0) and _G.za do
local args = {
    [1] = "renew",
    [2] = 25000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.za = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x50B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zb = true 
        while wait(0) and _G.zb do
local args = {
    [1] = "renew",
    [2] = 50000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zb = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x100B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zc = true 
        while wait(0) and _G.zc do
local args = {
    [1] = "renew",
    [2] = 100000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zc = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x250B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zd = true 
        while wait(0) and _G.zd do
local args = {
    [1] = "renew",
    [2] = 250000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zd = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x500B", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.ze = true 
        while wait(0) and _G.ze do
local args = {
    [1] = "renew",
    [2] = 500000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.ze = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x1T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zf = true 
        while wait(0) and _G.zf do
local args = {
    [1] = "renew",
    [2] = 1000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zf = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x5T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zg = true 
        while wait(0) and _G.zg do
local args = {
    [1] = "renew",
    [2] = 5000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zg = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x10T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zh = true 
        while wait(0) and _G.zh do
local args = {
    [1] = "renew",
    [2] = 10000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zh = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x50T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zi = true 
        while wait(0) and _G.zi do
local args = {
    [1] = "renew",
    [2] = 50000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zi = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x100T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zj = true 
        while wait(0) and _G.zj do
local args = {
    [1] = "renew",
    [2] = 100000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zj = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x500T", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zk = true 
        while wait(0) and _G.zk do
local args = {
    [1] = "renew",
    [2] = 500000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zk = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x1Qd", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zl = true 
        while wait(0) and _G.zl do
local args = {
    [1] = "renew",
    [2] = 1000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zl = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x5Qd", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zm = true 
        while wait(0) and _G.zm do
local args = {
    [1] = "renew",
    [2] = 5000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zm = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x10Qd", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zn = true 
        while wait(0) and _G.zn do
local args = {
    [1] = "renew",
    [2] = 10000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zn = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x50Qd", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zo = true 
        while wait(0) and _G.zo do
local args = {
    [1] = "renew",
    [2] = 50000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zo = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x100Qd", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zp = true 
        while wait(0) and _G.zp do
local args = {
    [1] = "renew",
    [2] = 100000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zp = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x500Qd", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zq = true 
        while wait(0) and _G.zq do
local args = {
    [1] = "renew",
    [2] = 500000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zq = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x1Qn", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zr = true 
        while wait(0) and _G.zr do
local args = {
    [1] = "renew",
    [2] = 1000000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zr = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x5Qn", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zs = true 
        while wait(0) and _G.zs do
local args = {
    [1] = "renew",
    [2] = 5000000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zs = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x10Qn", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zt = true 
        while wait(0) and _G.zt do
local args = {
    [1] = "renew",
    [2] = 10000000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zt = false
    end
end)

Rebirths2:CreateToggle("Auto Rebirths x50Qn", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.zq = true 
        while wait(0) and _G.zq do
local args = {
    [1] = "renew",
    [2] = 50000000000000000000,
}

game:GetService("ReplicatedStorage").comm.re:FireServer(unpack(args))
        end
    else
        _G.zq = false
    end
end)

eggs2:CreateToggle("Auto Buy Shadow Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Shadow = true 
        while wait(0) and _G.Shadow do
local args = {
    [1] = "buyegg",
    [2] = "Shadow Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))
        end
    else
        _G.Shadow = false
    end
end)

eggs2:CreateToggle("Auto Buy Golden Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Golden = true 
        while wait(0) and _G.Golden do
local args = {
    [1] = "buyegg",
    [2] = "Golden Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))
        end
    else
        _G.Golden = false
    end
end)

eggs2:CreateToggle("Auto Buy Blood Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.BL = true 
        while wait(0) and _G.BL do
local args = {
    [1] = "buyegg",
    [2] = "Blood Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))
        end
    else
        _G.BL = false
    end
end)

eggs2:CreateToggle("Auto Buy Empty Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.EmptyL = true 
        while wait(0) and _G.EmptyL do
local args = {
    [1] = "buyegg",
    [2] = "Empty Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.EmptyL = false
    end
end)

eggs:CreateToggle("Auto Buy Cyber Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Cyber = true 
        while wait(0) and _G.Cyber do
local args = {
    [1] = "buyegg",
    [2] = "Cyber Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Cyber = false
    end
end)

eggs:CreateToggle("Auto Buy Metal Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Metal = true 
        while wait(0) and _G.Metal do
local args = {
    [1] = "buyegg",
    [2] = "Metal Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Metal = false
    end
end)

eggs:CreateToggle("Auto Buy Star Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Star = true 
        while wait(0) and _G.Star do
local args = {
    [1] = "buyegg",
    [2] = "Star Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Star = false
    end
end)

eggs:CreateToggle("Auto Buy Void Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Void = true 
        while wait(0) and _G.Void do
local args = {
    [1] = "buyegg",
    [2] = "Void Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Void = false
    end
end)

eggs:CreateToggle("Auto Buy Mythical Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Mythical = true 
        while wait(0) and _G.Mythical do
local args = {
    [1] = "buyegg",
    [2] = "Mythical Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Mythical = false
    end
end)

eggs:CreateToggle("Auto Buy Lightning Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Lightning = true 
        while wait(0) and _G.Lightning do
local args = {
    [1] = "buyegg",
    [2] = "Lightning Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Lightning = false
    end
end)

eggs:CreateToggle("Auto Buy Chocolate Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Chocolate = true 
        while wait(0) and _G.Chocolate do
local args = {
    [1] = "buyegg",
    [2] = "Chocolate Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Chocolate = false
    end
end)

eggs:CreateToggle("Auto Buy Candy Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Candy = true 
        while wait(0) and _G.Candy do
local args = {
    [1] = "buyegg",
    [2] = "Candy Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Candy = false
    end
end)

eggs:CreateToggle("Auto Buy Neon Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Neon = true 
        while wait(0) and _G.Neon do
local args = {
    [1] = "buyegg",
    [2] = "Neon Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Neon = false
    end
end)

eggs:CreateToggle("Auto Buy Rainbow Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Rainbow = true 
        while wait(0) and _G.Rainbow do
local args = {
    [1] = "buyegg",
    [2] = "Rainbow Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Rainbow = false
    end
end)

eggs:CreateToggle("Auto Buy Sunny Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Sunny = true 
        while wait(0) and _G.Sunny do
local args = {
    [1] = "buyegg",
    [2] = "Sunny Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Sunny = false
    end
end)

eggs:CreateToggle("Auto Buy Ocean Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Ocean = true 
        while wait(0) and _G.Ocean do
local args = {
    [1] = "buyegg",
    [2] = "Ocean Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Ocean = false
    end
end)

eggs:CreateToggle("Auto Buy Godly Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Godly = true 
        while wait(0) and _G.Godly do
local args = {
    [1] = "buyegg",
    [2] = "Godly Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Godly = false
    end
end)


eggs:CreateToggle("Auto Buy Flaming Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Flaming = true 
        while wait(0) and _G.Flaming do
local args = {
    [1] = "buyegg",
    [2] = "Flaming Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Flaming = false
    end
end)

eggs:CreateToggle("Auto Buy Evil Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Evil = true 
        while wait(0) and _G.Evil do
local args = {
    [1] = "buyegg",
    [2] = "Evil Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Evil = false
    end
end)


eggs:CreateToggle("Auto Buy Sandy Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Sandy = true 
        while wait(0) and _G.Sandy do
local args = {
    [1] = "buyegg",
    [2] = "Sandy Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Sandy = false
    end
end)


eggs:CreateToggle("Auto Buy Wooden Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Wooden = true 
        while wait(0) and _G.Wooden do
local args = {
    [1] = "buyegg",
    [2] = "Wooden Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Wooden = false
    end
end)


eggs:CreateToggle("Auto Buy Swampy Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Swampy = true 
        while wait(0) and _G.Swampy do
local args = {
    [1] = "buyegg",
    [2] = "Swampy Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Swampy = false
    end
end)

eggs:CreateToggle("Auto Buy Liberty Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Liberty = true 
        while wait(0) and _G.Liberty do
local args = {
    [1] = "buyegg",
    [2] = "Liberty Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Liberty = false
    end
end)
eggs:CreateToggle("Auto Buy Frozen Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Frozen = true 
        while wait(0) and _G.Frozen do
local args = {
    [1] = "buyegg",
    [2] = "Frozen Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Frozen = false
    end
end)
eggs:CreateToggle("Auto Buy Wild Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Wild = true 
        while wait(0) and _G.Wild do
local args = {
    [1] = "buyegg",
    [2] = "Wild Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Wild = false
    end
end)
eggs:CreateToggle("Auto Buy Common Eggs", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
        _G.Common = true 
        while wait(0) and _G.Common do
local args = {
    [1] = "buyegg",
    [2] = "Common Egg"
}

game:GetService("ReplicatedStorage").comm.rf:InvokeServer(unpack(args))

        end
    else
        _G.Common = false
    end
end)



AutoTab:CreateButton("Destroy Gui :D", function() --you dont need "arg" for a button
game:GetService("CoreGui").uiui:Destroy()
end)

teleports:CreateButton("Spawn", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-32.3284302, 3.42929983, -108.718323)
end)

teleports:CreateButton("Zone 1", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-902.639771, 3.00753093, -114.320244)
end)
teleports:CreateButton("Zone 2", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-1696.85828, 3.00753164, -122.047241)
end)
teleports:CreateButton("Zone 3", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-2485.12427, 3.00753164, -108.036499)
end)
teleports:CreateButton("Zone 4", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-3337.0022, 3.00753093, -96.2599487)
end)
teleports:CreateButton("Zone 5", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-4178.17383, -1.40707016, -127.626274)
end)
teleports:CreateButton("Zone 6", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-4889.88135, 3.00753093, -129.380173)
end)
teleports:CreateButton("Zone 7", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-5585.42139, 0.367529392, -108.215744)
end)
teleports:CreateButton("Zone 8", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-6419.60303, 3.00753093, -90.5440521)
end)
teleports:CreateButton("Zone 9", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-7244.00244, 3.00753093, -98.7939987)
end)
teleports:CreateButton("Zone 10", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-8205.54688, 3.00753093, -86.6548538)
end)
teleports:CreateButton("Zone 11", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-9016.79004, 3.50753164, -185.327057)
end)
teleports:CreateButton("Zone 12", function() --you dont need "arg" for a button
game.Players.LocalPlayer.character.HumanoidRootPart.CFrame = CFrame.new(-9646.76758, 3.00753164, -88.3352737)
end)

MISC:CreateToggle("NO CLIP Press(E)", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.NO = true 
  noclip = false
game:GetService('RunService').Stepped:connect(function()
if noclip then
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
plr = game.Players.LocalPlayer
mouse = plr:GetMouse()
mouse.KeyDown:connect(function(key)

if key == "e" then
noclip = not noclip
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
print('Created by FileExplorer')
print('Credits to Peyton for the ChangeState part of this script')

         
else
_G.NO = false
end
end)



MISC:CreateToggle("Speed Hack 100", function(arg) --the (arg) is if the checkbox is toggled or not
    if arg then
_G.Speed = true 
        while wait() and _G.Speed do
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 100
        end
    else
        _G.Speed = false
           game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20
         end
end)

--| Anti AFK | By Altix#3395
    local Virtual = game:service'VirtualUser'
    game:service'Players'.LocalPlayer.Idled:connect(function()
        Virtual:CaptureController()
        Virtual:ClickButton2(Vector2.new())
        wait(2)
    end)
